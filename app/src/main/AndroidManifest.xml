<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.skye_stagram">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <!-- android:name sets the application class, while the first activity
    is defined within the tags. -->
    <application
        android:name=".ParseApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">

        <!-- File objects must be wrapped as content provider objects
         using the FileProvider for API 24+
             Additional security condition for apps targeting newer APIs
             Simply specifying a file is problematic because the camera app that launches
                 may not have access to that file
             The workaround is to make this app a content provider and wrap the resource
                  in a content provider-->
        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="com.example.fileprovider"
            android:exported="false"
            android:grantUriPermissions="true"
            >
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/fileprovider" />
        </provider>


        <activity android:name=".activities.SignupActivity"></activity>
        <activity android:name=".activities.MainActivity" />
        <activity android:name=".activities.LoginActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>